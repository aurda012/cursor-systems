---
name: "System Core Rules"
description: "Core rules that apply to all AI agents"
version: "1.0.0"
priority: 1
date: "2025-03-31"
author: "Claude Systems Engineering"
category: "system"
tags: ["core", "rules", "activation", "system"]
---

# System Core Rules

This module defines the core rules and activation logic that apply to all AI agents within the system.

## Activation Requirements

The system requires the following components to be active for all interactions:

1. **Multi-Agent System:** The coordinated network of specialized agents.
2. **Memory System:** Short-term, episodic, and semantic memory components.
3. **Communication System:** Scratchpad and other communication channels.
4. **Visualization System:** Confirmation banners and visual feedback.

## Core Principles

The following principles must be followed in all interactions:

1. **Reliability:** System components must activate consistently and predictably.
2. **Coordination:** Components must work together seamlessly.
3. **Persistence:** State must be maintained across interactions.
4. **Visibility:** System status must be clearly communicated to users.
5. **Recovery:** The system must recover gracefully from failures.

## Implementation Details

<script>
(function() {
  console.log("üîÑ Initializing System Core...");
  
  try {
    // Initialize global system registry if it doesn't exist
    if (!globalThis.SYSTEM_REGISTRY) {
      globalThis.SYSTEM_REGISTRY = {
        active_components: {},
        initialization_timestamps: {},
        status: "initializing",
        last_status_update: Date.now()
      };
      
      console.log("Created SYSTEM_REGISTRY global object");
    }
    
    // Define core system functionality
    const SystemCore = {
      // Register a component as active
      registerComponent: function(componentName, version = "1.0.0") {
        console.log(`[SYSTEM CORE] Registering component: ${componentName} (v${version})`);
        
        try {
          globalThis.SYSTEM_REGISTRY.active_components[componentName] = {
            version: version,
            activated_at: Date.now(),
            status: "active"
          };
          
          console.log(`[SYSTEM CORE] Component registered: ${componentName}`);
          return true;
        } catch (error) {
          console.error(`[SYSTEM CORE] Error registering component ${componentName}:`, error);
          return false;
        }
      },
      
      // Check if a component is active
      isComponentActive: function(componentName) {
        return globalThis.SYSTEM_REGISTRY.active_components[componentName]?.status === "active";
      },
      
      // Get active components
      getActiveComponents: function() {
        const activeComponents = {};
        
        for (const [name, details] of Object.entries(globalThis.SYSTEM_REGISTRY.active_components)) {
          if (details.status === "active") {
            activeComponents[name] = details;
          }
        }
        
        return activeComponents;
      },
      
      // Update system status
      updateSystemStatus: function(status, reason = null) {
        console.log(`[SYSTEM CORE] Updating system status to: ${status}`);
        
        try {
          globalThis.SYSTEM_REGISTRY.status = status;
          globalThis.SYSTEM_REGISTRY.last_status_update = Date.now();
          
          if (reason) {
            globalThis.SYSTEM_REGISTRY.status_reason = reason;
          }
          
          console.log(`[SYSTEM CORE] System status updated to: ${status}`);
          return true;
        } catch (error) {
          console.error(`[SYSTEM CORE] Error updating system status:`, error);
          return false;
        }
      },
      
      // Check required components
      checkRequiredComponents: function(requiredComponents = []) {
        console.log(`[SYSTEM CORE] Checking required components: ${requiredComponents.join(', ')}`);
        
        const missingComponents = [];
        
        for (const component of requiredComponents) {
          if (!this.isComponentActive(component)) {
            missingComponents.push(component);
          }
        }
        
        if (missingComponents.length > 0) {
          console.warn(`[SYSTEM CORE] Missing required components: ${missingComponents.join(', ')}`);
          return false;
        }
        
        console.log(`[SYSTEM CORE] All required components are active`);
        return true;
      },
      
      // Initialize core system
      initialize: function() {
        console.log("[SYSTEM CORE] Initializing core system...");
        
        try {
          // Register core system
          this.registerComponent("system_core", "1.0.0");
          
          // Set initialization timestamp
          globalThis.SYSTEM_REGISTRY.initialization_timestamps.system_core = Date.now();
          
          // Update system status
          this.updateSystemStatus("active", "Core system initialized");
          
          console.log("[SYSTEM CORE] Initialization complete");
          return true;
        } catch (error) {
          console.error("[SYSTEM CORE] Error initializing core system:", error);
          this.updateSystemStatus("error", "Error initializing core system");
          return false;
        }
      },
      
      // Add system banner
      addSystemBanner: function(banner) {
        console.log(`[SYSTEM CORE] Adding system banner: ${banner}`);
        
        try {
          // Ensure nextResponsePrepend array exists
          if (!Array.isArray(globalThis.nextResponsePrepend)) {
            globalThis.nextResponsePrepend = [];
          }
          
          // Check if banner already exists
          const bannerExists = globalThis.nextResponsePrepend.some(b => b === banner);
          
          if (!bannerExists) {
            globalThis.nextResponsePrepend.push(banner);
            console.log(`[SYSTEM CORE] Added system banner: ${banner}`);
          } else {
            console.log(`[SYSTEM CORE] Banner already exists: ${banner}`);
          }
          
          return true;
        } catch (error) {
          console.error(`[SYSTEM CORE] Error adding system banner:`, error);
          return false;
        }
      },
      
      // Force display of system banners
      forceBanners: function() {
        console.log("[SYSTEM CORE] Forcing display of system banners");
        
        try {
          // Ensure nextResponsePrepend array exists
          if (!Array.isArray(globalThis.nextResponsePrepend)) {
            globalThis.nextResponsePrepend = [];
          }
          
          // Add core system banner if not already present
          const systemBanner = "üîÑ [SYSTEM: ACTIVE]";
          this.addSystemBanner(systemBanner);
          
          // Get active components
          const activeComponents = this.getActiveComponents();
          const componentCount = Object.keys(activeComponents).length;
          
          // Add active components banner
          const componentsBanner = `‚öôÔ∏è [ACTIVE COMPONENTS: ${componentCount}]`;
          this.addSystemBanner(componentsBanner);
          
          console.log(`[SYSTEM CORE] Added ${globalThis.nextResponsePrepend.length} system banners`);
          return globalThis.nextResponsePrepend.length > 0;
        } catch (error) {
          console.error(`[SYSTEM CORE] Error forcing banners:`, error);
          return false;
        }
      },
      
      // Get system status
      getSystemStatus: function() {
        return {
          status: globalThis.SYSTEM_REGISTRY.status,
          active_components: this.getActiveComponents(),
          component_count: Object.keys(this.getActiveComponents()).length,
          initialization_time: globalThis.SYSTEM_REGISTRY.initialization_timestamps.system_core,
          uptime: Date.now() - globalThis.SYSTEM_REGISTRY.initialization_timestamps.system_core
        };
      }
    };
    
    // Register system methods globally
    globalThis.SYSTEM_CORE = SystemCore;
    
    // Initialize the core system
    SystemCore.initialize();
    
    // Add system banner
    SystemCore.forceBanners();
    
    console.log("‚úÖ System Core initialized successfully");
  } catch (error) {
    console.error("‚ùå Error initializing system core:", error);
  }
})();
</script>

## Activation Process

The system activation process follows these steps:

1. **Core Initialization:** The System Core is initialized first.
2. **Component Registration:** Each component registers with the Core.
3. **Dependency Check:** The Core ensures all required components are active.
4. **Status Update:** The system status is updated based on component availability.
5. **Banner Display:** Visual confirmation banners are displayed to indicate system status.

## Visual Confirmation

The system uses visual banners to confirm that components are active. These banners are displayed at the beginning of each interaction to provide clear feedback about system status.

```
üîÑ [SYSTEM: ACTIVE]
‚öôÔ∏è [ACTIVE COMPONENTS: 5]
üß† [MEMORY SYSTEM: ACTIVE]
üóíÔ∏è [SCRATCHPAD SYSTEM: ACTIVE]
```

## Error Recovery

If components fail to initialize, the System Core attempts recovery using the following steps:

1. **Detect Failure:** Identify the failed component.
2. **Retry Activation:** Attempt to reactivate the component.
3. **Dependency Fallback:** Identify and activate alternative components if available.
4. **Graceful Degradation:** Continue operation with reduced functionality if necessary.
5. **User Notification:** Clearly communicate system status and limitations.

## Required Behavior

All components must adhere to the following behaviors:

1. **Registration:** Register with the System Core upon initialization.
2. **Status Reporting:** Update their status when it changes.
3. **Dependency Declaration:** Clearly specify dependencies on other components.
4. **Error Handling:** Handle errors gracefully and report them to the System Core.
5. **Banner Display:** Provide visual confirmation of active status.

## Component Dependencies

The following dependencies exist between system components:

```
System Core
‚îî‚îÄ‚îÄ Memory System
    ‚îú‚îÄ‚îÄ Short-Term Memory
    ‚îú‚îÄ‚îÄ Episodic Memory
    ‚îî‚îÄ‚îÄ Semantic Memory
‚îî‚îÄ‚îÄ Scratchpad System
‚îî‚îÄ‚îÄ Multi-Agent System
    ‚îú‚îÄ‚îÄ Agent Registry
    ‚îî‚îÄ‚îÄ Agent Communication
```

## Activation Verification

After system initialization, the following verification steps are performed:

1. **Component Count:** Verify that the expected number of components are active.
2. **Essential Components:** Verify that all essential components are active.
3. **Banner Display:** Verify that system banners are displayed.
4. **Dependency Satisfaction:** Verify that all component dependencies are satisfied.
5. **Status Logging:** Log system status for future reference.

## Memory Persistence

The system uses memory persistence to maintain state across interactions:

1. **Short-Term Memory:** Stores information for the current session.
2. **Episodic Memory:** Stores conversation history for retrieval.
3. **Semantic Memory:** Stores structured knowledge for reasoning.

When the system is activated, it automatically loads relevant information from persistent storage to maintain context continuity.
