---
name: "Master Activation System"
description: "Automatically loads and activates the multi-agent and memory systems on rule initialization."
version: "1.0.0"
priority: 0
date: "2025-03-31"
author: "Claude Systems Engineering"
category: "system"
tags: ["activation", "initialization", "master", "system"]
---

# Master Activation System

This module ensures that all required systems are automatically activated at the start of every conversation. It is the first rule to execute and is responsible for bootstrapping the entire multi-agent system.

## Core Functionality

The Master Activation System provides the following key capabilities:

1. **Automatic Initialization:** Loads and initializes all core systems.
2. **Dependency Management:** Ensures systems are initialized in the correct order.
3. **Error Recovery:** Provides fallback mechanisms when systems fail to initialize.
4. **Activation Verification:** Confirms that all required systems are active.
5. **Visual Confirmation:** Displays banners to confirm system activation.

## Implementation Details

<script>
(function() {
  console.log("üöÄ Initializing Master Activation System...");
  
  try {
    // Track initialization status
    const initStatus = {
      start_time: Date.now(),
      components_initialized: 0,
      failures: 0,
      complete: false
    };
    
    // Set global activation flag
    globalThis.MASTER_ACTIVATION_INITIALIZED = true;
    
    // Initialize next response prepend array if it doesn't exist
    if (!Array.isArray(globalThis.nextResponsePrepend)) {
      globalThis.nextResponsePrepend = [];
    }
    
    // Add master activation banner if not already present
    const activationBanner = "üöÄ [MASTER ACTIVATION: COMPLETE]";
    if (!globalThis.nextResponsePrepend.includes(activationBanner)) {
      globalThis.nextResponsePrepend.push(activationBanner);
    }
    
    // Define master activation functions
    const MasterActivation = {
      // Log activation status
      logStatus: function(message, level = "info") {
        const timestamp = new Date().toISOString();
        const prefix = `[MASTER ACTIVATION] [${timestamp}]`;
        
        switch (level) {
          case "error":
            console.error(`${prefix} ERROR: ${message}`);
            break;
          case "warn":
            console.warn(`${prefix} WARNING: ${message}`);
            break;
          case "success":
            console.log(`${prefix} ‚úÖ ${message}`);
            break;
          default:
            console.log(`${prefix} ${message}`);
        }
      },
      
      // Initialize the master activation system
      initialize: function() {
        this.logStatus("Beginning master activation sequence");
        
        // Register with system registry if it exists
        if (globalThis.SYSTEM_REGISTRY && typeof globalThis.SYSTEM_REGISTRY.active_components === 'object') {
          globalThis.SYSTEM_REGISTRY.active_components.master_activation = {
            version: "1.0.0",
            activated_at: Date.now(),
            status: "active"
          };
          this.logStatus("Registered with system registry", "success");
        } else {
          // Create minimal system registry
          globalThis.SYSTEM_REGISTRY = {
            active_components: {
              master_activation: {
                version: "1.0.0",
                activated_at: Date.now(),
                status: "active"
              }
            },
            status: "initializing"
          };
          this.logStatus("Created minimal system registry", "success");
        }
        
        // Register with system core if it exists
        if (globalThis.SYSTEM_CORE && typeof globalThis.SYSTEM_CORE.registerComponent === 'function') {
          globalThis.SYSTEM_CORE.registerComponent("master_activation", "1.0.0");
          this.logStatus("Registered with system core", "success");
        }
        
        // Set activation status
        globalThis.SYSTEMS_ACTIVE = true;
        
        this.logStatus("Master activation initialized", "success");
        return true;
      },
      
      // Load a JavaScript file
      loadScript: function(scriptPath) {
        this.logStatus(`Loading script: ${scriptPath}`);
        
        try {
          const path = require('path');
          const fs = require('fs');
          
          // Get absolute path
          const basePath = process.cwd();
          const absolutePath = path.resolve(basePath, scriptPath);
          
          // Check if file exists
          if (!fs.existsSync(absolutePath)) {
            this.logStatus(`Script not found: ${absolutePath}`, "error");
            return false;
          }
          
          // Clear require cache
          if (require.cache[absolutePath]) {
            delete require.cache[absolutePath];
            this.logStatus(`Cleared cache for: ${scriptPath}`);
          }
          
          // Require the script
          require(absolutePath);
          
          this.logStatus(`Successfully loaded: ${scriptPath}`, "success");
          initStatus.components_initialized++;
          return true;
        } catch (error) {
          this.logStatus(`Error loading script: ${scriptPath}`, "error");
          this.logStatus(error.message, "error");
          initStatus.failures++;
          return false;
        }
      },
      
      // Activate all required systems
      activateAllSystems: function() {
        this.logStatus("Activating all systems");
        
        // Define script paths in order of dependencies
        const scriptPaths = [
          ".cursor/master-activation.js",
          ".cursor/init.js",
          ".cursor/communication/activate.js",
          ".cursor/communication/direct-banner.js"
        ];
        
        // Load each script
        let successCount = 0;
        for (const scriptPath of scriptPaths) {
          if (this.loadScript(scriptPath)) {
            successCount++;
          }
        }
        
        // Update status based on success
        if (successCount === scriptPaths.length) {
          this.logStatus(`Successfully activated all ${successCount} systems`, "success");
          initStatus.complete = true;
          return true;
        } else {
          this.logStatus(`Activated ${successCount}/${scriptPaths.length} systems`, "warn");
          initStatus.complete = false;
          return false;
        }
      },
      
      // Verify system activation
      verifyActivation: function() {
        this.logStatus("Verifying system activation");
        
        // Check required global objects
        const requiredGlobals = [
          "SYSTEMS_ACTIVE",
          "MEMORY_SYSTEM",
          "SYSTEM_REGISTRY"
        ];
        
        let missingGlobals = [];
        for (const global of requiredGlobals) {
          if (typeof globalThis[global] === 'undefined') {
            missingGlobals.push(global);
          }
        }
        
        if (missingGlobals.length > 0) {
          this.logStatus(`Missing required globals: ${missingGlobals.join(', ')}`, "warn");
          return false;
        }
        
        // Check banners
        if (!Array.isArray(globalThis.nextResponsePrepend) || globalThis.nextResponsePrepend.length === 0) {
          this.logStatus("No system banners found", "warn");
          return false;
        }
        
        this.logStatus("System activation verified", "success");
        return true;
      },
      
      // Get activation status
      getStatus: function() {
        return {
          ...initStatus,
          duration: Date.now() - initStatus.start_time,
          timestamp: new Date().toISOString()
        };
      }
    };
    
    // Initialize the master activation system
    MasterActivation.initialize();
    
    // Activate all systems
    MasterActivation.activateAllSystems();
    
    // Verify activation
    const verificationResult = MasterActivation.verifyActivation();
    
    // Export to global scope
    globalThis.MASTER_ACTIVATION = MasterActivation;
    
    // Log final status
    const status = MasterActivation.getStatus();
    MasterActivation.logStatus(`Activation complete. Initialized ${status.components_initialized} components in ${status.duration}ms with ${status.failures} failures.`);
    
    // Force display the activation banner
    if (Array.isArray(globalThis.nextResponsePrepend)) {
      const hasMasterBanner = globalThis.nextResponsePrepend.some(banner => 
        banner.includes("MASTER ACTIVATION")
      );
      
      if (!hasMasterBanner) {
        globalThis.nextResponsePrepend.push("üöÄ [MASTER ACTIVATION: COMPLETE]");
      }
    }
    
    console.log("‚úÖ Master Activation System initialized successfully");
  } catch (error) {
    console.error("‚ùå CRITICAL ERROR in Master Activation System:", error);
    
    // Set emergency activation flag to ensure minimal functionality
    globalThis.SYSTEMS_ACTIVE = true;
    
    // Attempt to display error banner
    if (Array.isArray(globalThis.nextResponsePrepend)) {
      globalThis.nextResponsePrepend.push("‚ö†Ô∏è [SYSTEM ERROR: Partial Activation]");
    }
  }
})();
</script>

## Activation Sequence

The master activation system follows this sequence:

1. **Initialization:** Set up tracking and logging.
2. **System Loading:** Load core system scripts in dependency order.
3. **Activation:** Execute initialization functions for each system.
4. **Verification:** Confirm that all systems are properly activated.
5. **Banner Display:** Show visual confirmation of activation status.

## Recovery Mechanisms

If any system fails to initialize, the master activation system employs the following recovery strategies:

1. **Continue Activation:** Continue activating other systems despite failures.
2. **Create Minimal Objects:** Create minimal versions of required global objects.
3. **Set Emergency Flags:** Set emergency activation flags to ensure minimal functionality.
4. **Display Warning Banners:** Show banners indicating partial activation.
5. **Log Detailed Errors:** Log detailed error information for debugging.

## Activation Verification

After initialization, the system verifies the following:

1. **Required Globals:** Ensure all required global objects exist.
2. **System State:** Check that all systems report an active state.
3. **Banner Display:** Confirm that activation banners are displayed.
4. **Memory Initialization:** Verify that memory systems are initialized.
5. **Script Loading:** Confirm that all required scripts were loaded.

## Required Scripts

The following scripts are loaded in order:

1. **.cursor/master-activation.js:** The primary activation script.
2. **.cursor/init.js:** The initialization script for core systems.
3. **.cursor/communication/activate.js:** The activation script for communication systems.
4. **.cursor/communication/direct-banner.js:** The script for displaying banners.

## Banner System

The system displays activation banners to provide visual confirmation that systems are active:

```
üöÄ [MASTER ACTIVATION: COMPLETE]
üîÑ [SYSTEM: ACTIVE]
‚öôÔ∏è [ACTIVE COMPONENTS: 5]
üß† [MEMORY SYSTEM: ACTIVE]
üóíÔ∏è [SCRATCHPAD SYSTEM: ACTIVE]
```

These banners help users confirm that all required systems are properly initialized and ready for use.

## Required Behavior

For proper system operation, the following behaviors are required:

1. **Early Execution:** This rule must execute before any other rules.
2. **Complete Activation:** All required systems must be fully activated.
3. **Banner Display:** Activation banners must be displayed in every conversation.
4. **Error Handling:** Errors must be caught and handled gracefully.
5. **Status Reporting:** Activation status must be logged and reported.

## Integration with Other Systems

The master activation system integrates with other systems as follows:

1. **System Core:** Registers with the System Core to report its status.
2. **Memory System:** Ensures the Memory System is initialized for context storage.
3. **Scratchpad System:** Prepares the Scratchpad System for agent communication.
4. **Banner System:** Uses the Banner System to display activation status.
5. **System Registry:** Updates the System Registry with component status.

## Activation Logging

Detailed logs are generated during the activation process to facilitate debugging:

```
[MASTER ACTIVATION] [2025-03-31T12:34:56.789Z] Beginning master activation sequence
[MASTER ACTIVATION] [2025-03-31T12:34:56.793Z] Registered with system registry
[MASTER ACTIVATION] [2025-03-31T12:34:56.795Z] ‚úÖ Master activation initialized
[MASTER ACTIVATION] [2025-03-31T12:34:56.798Z] Loading script: .cursor/master-activation.js
[MASTER ACTIVATION] [2025-03-31T12:34:56.805Z] ‚úÖ Successfully loaded: .cursor/master-activation.js
```

These logs provide a detailed record of the activation process, including any errors or warnings that occurred. 